package main

import (
	"context"
	"fmt"
	"net"
)

var GTPUPacket = []byte{
	// GTP-U header
	0x30, 0xff, 0x00, 0x54, 0xe5, 0xaf, 0xfa, 0xc8,
	// T-PDU payload
	0x45, 0x00, 0x00, 0x54, 0x90, 0x40, 0x40, 0x00,
	0x3f, 0x01, 0x1f, 0x22, 0xc0, 0xa8, 0x02, 0x73,
	0x64, 0x64, 0x64, 0xc7, 0x08, 0x00, 0x91, 0xcc,
	0x05, 0xb4, 0x00, 0x01, 0x9e, 0x31, 0x78, 0x5f,
	0x00, 0x00, 0x00, 0x00, 0x8b, 0x1a, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13,
	0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
	0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
	0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
	0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37,
}

func floodUDPPackets(ctx context.Context, dest *net.UDPAddr) error {
	sendSock, err := net.DialUDP("udp", nil, dest)
	if err != nil {
		return err
	}
	defer sendSock.Close()

	for ctx.Err() == nil {
		if _, err := sendSock.Write(GTPUPacket); err != nil {
			// Continue to send packets even if no receiver
		}
	}
	fmt.Println("Exit floodUDPPackets")
	return nil
}

func main() {
	destAddr, err := net.ResolveUDPAddr("udp", "localhost:2563")
	if err != nil {
		panic(err)
	}
	floodUDPPackets(context.Background(), destAddr)
}
